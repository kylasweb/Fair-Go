// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Models
model User {
  id               String    @id @default(cuid())
  email            String    @unique
  phone            String?   @unique
  password         String? // Optional for OAuth users
  name             String?
  avatar           String?
  role             UserRole  @default(USER)
  language         String    @default("en") // en, hi, ta, te, etc.
  isActive         Boolean   @default(true)
  status           String    @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  lastLoginAt      DateTime?
  suspensionReason String? // Reason for suspension if suspended
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  bookings                 Booking[]
  reviews                  Review[]
  payments                 Payment[]
  wallets                  Wallet[]
  notifications            Notification[]
  driver                   Driver?
  admin                    Admin?
  createdTrainingExamples  AITrainingExample[] @relation("TrainingExampleCreator")
  reviewedTrainingExamples AITrainingExample[] @relation("TrainingExampleReviewer")

  @@map("users")
}

model Driver {
  id                 String      @id @default(cuid())
  userId             String      @unique
  licenseNumber      String      @unique
  vehicleNumber      String      @unique
  vehicleType        VehicleType
  vehicleModel       String
  vehicleColor       String
  isAvailable        Boolean     @default(true)
  isVerified         Boolean     @default(false)
  rating             Float       @default(0)
  totalRides         Int         @default(0)
  currentLocationLat Float?
  currentLocationLng Float?
  status             String      @default("PENDING") // PENDING, APPROVED, REJECTED
  approvedAt         DateTime? // When driver was approved
  rejectionReason    String? // Reason for rejection
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  reviews   Review[]
  documents Document[]

  @@map("drivers")
}

// Admin Model
model Admin {
  id          String   @id @default(cuid())
  userId      String   @unique
  permissions String? // JSON string of permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

// Booking Models
model Booking {
  id             String        @id @default(cuid())
  userId         String
  driverId       String?
  status         BookingStatus @default(REQUESTED)
  pickupLocation String
  pickupLat      Float
  pickupLng      Float
  dropLocation   String?
  dropLat        Float?
  dropLng        Float?
  vehicleType    VehicleType   @default(CAR_ECONOMY)
  estimatedPrice Float
  finalPrice     Float?
  fare           Float? // Alternative field name for finalPrice
  distance       Float? // in kilometers
  duration       Int? // in minutes
  bookingType    BookingType   @default(MANUAL)
  aiSessionId    String? // For AI-powered bookings
  notes          String? // Additional booking notes
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  completedAt    DateTime?

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  driver   Driver?   @relation(fields: [driverId], references: [id])
  reviews  Review[]
  payments Payment[]
  tracking Tracking?

  @@map("bookings")
}

model Tracking {
  id        String   @id @default(cuid())
  bookingId String   @unique
  driverLat Float
  driverLng Float
  eta       Int? // Estimated time of arrival in minutes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("tracking")
}

// Payment Models
model Payment {
  id            String        @id @default(cuid())
  userId        String
  bookingId     String
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Float    @default(0)
  currency  String   @default("INR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

// Review System
model Review {
  id        String   @id @default(cuid())
  userId    String
  driverId  String
  bookingId String   @unique
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  driver  Driver  @relation(fields: [driverId], references: [id], onDelete: Cascade)
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// Driver Documents
model Document {
  id         String         @id @default(cuid())
  driverId   String
  type       DocumentType
  fileUrl    String
  status     DocumentStatus @default(PENDING)
  verifiedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// Notification System
model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  category  String? // Additional categorization
  isRead    Boolean          @default(false)
  readAt    DateTime? // When notification was read
  data      String? // JSON data for the notification
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// AI System Configuration
model AISystemPrompt {
  id        String   @id @default(cuid())
  name      String   @unique
  prompt    String
  language  String   @default("en")
  isActive  Boolean  @default(true)
  version   Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ai_system_prompts")
}

model AICallSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique
  userId      String?
  phoneNumber String
  transcript  String?
  intent      String?
  entities    String? // JSON string
  bookingId   String?
  status      String   @default("active")
  duration    Int? // in seconds
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ai_call_sessions")
}

// AI Training & Fine-tuning Models
model AITrainingExample {
  id         String                @id @default(cuid())
  prompt     String // Original user transcript
  completion String // Correct AI interpretation (JSON)
  language   String                @default("ml") // ml, en, hi, ta, te, ml-en
  source     TrainingExampleSource @default(API_SUBMISSION)
  status     TrainingExampleStatus @default(PENDING_REVIEW)
  metadata   String? // JSON metadata
  confidence Float? // Confidence score if available
  createdBy  String // Admin user ID
  reviewedBy String? // Admin who reviewed
  reviewedAt DateTime?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  // Relations
  creator  User  @relation("TrainingExampleCreator", fields: [createdBy], references: [id])
  reviewer User? @relation("TrainingExampleReviewer", fields: [reviewedBy], references: [id])

  @@index([status])
  @@index([language])
  @@index([createdAt])
  @@map("ai_training_examples")
}

model AIFinetuneJob {
  id                String            @id @default(cuid())
  name              String // Human-readable job name
  description       String? // Job description
  status            FinetuneJobStatus @default(PREPARING)
  sourceDatasetSize Int // Number of training examples used
  datasetFilters    String? // JSON filters used to select data
  externalJobId     String? // Puter.js job ID
  resultingModelId  String? // ID of the resulting fine-tuned model
  accuracy          Float? // Model accuracy if available
  error             String? // Error message if failed
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([status])
  @@index([createdAt])
  @@map("ai_finetune_jobs")
}

model AppConfig {
  id          String   @id @default(cuid())
  key         String   @unique // Configuration key (e.g., 'active_ai_model_id')
  value       String // Configuration value
  description String? // Human-readable description
  isSystem    Boolean  @default(false) // Whether this is a system config
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@map("app_config")
}

// Enums
enum UserRole {
  USER
  DRIVER
  ADMIN
  SUPER_ADMIN
}

enum VehicleType {
  AUTO_RICKSHAW
  CAR_ECONOMY
  CAR_PREMIUM
  CAR_LUXURY
  SUV
  BIKE
}

enum BookingStatus {
  REQUESTED
  ACCEPTED
  CONFIRMED
  DRIVER_ARRIVED
  PICKED_UP
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_DRIVER_AVAILABLE
}

enum BookingType {
  MANUAL
  AI_VOICE
  AI_CHAT
  SCHEDULED
}

enum PaymentMethod {
  CASH
  UPI
  WALLET
  CREDIT_CARD
  DEBIT_CARD
  NET_BANKING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DocumentType {
  LICENSE
  RC_BOOK
  INSURANCE
  PUC
  PROFILE_PHOTO
  AADHAR
  PAN
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum NotificationType {
  BOOKING_CONFIRMED
  DRIVER_ARRIVED
  RIDE_STARTED
  RIDE_COMPLETED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PROMOTION
  SYSTEM
}

enum TrainingExampleStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum TrainingExampleSource {
  MANUAL_CORRECTION
  BULK_UPLOAD
  API_SUBMISSION
}

enum FinetuneJobStatus {
  PREPARING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// API Security Models
model ApiCredential {
  id             String    @id @default(cuid())
  service        String // e.g., 'fairgo-api', 'payment-gateway', etc.
  keyName        String // Human-readable name for the key
  encryptedValue String // Encrypted/hashed API key or credential
  isActive       Boolean   @default(true)
  expiresAt      DateTime?
  permissions    String? // JSON string of permissions
  metadata       String? // JSON string for additional config
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("api_credentials")
}

model ApiUsageLog {
  id           String   @id @default(cuid())
  apiKeyId     String?
  endpoint     String
  method       String
  statusCode   Int
  responseTime Int // in milliseconds
  ipAddress    String?
  userAgent    String?
  success      Boolean
  errorMessage String?
  createdAt    DateTime @default(now())

  @@map("api_usage_logs")
}
